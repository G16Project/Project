// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.source.project.entity;

import com.source.project.domain.EPosition;
import com.source.project.domain.Employee;
import com.source.project.domain.EmployeeDataOnDemand;
import com.source.project.entity.Loan;
import com.source.project.entity.LoanDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LoanDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LoanDataOnDemand: @Component;
    
    private Random LoanDataOnDemand.rnd = new SecureRandom();
    
    private List<Loan> LoanDataOnDemand.data;
    
    @Autowired
    private EmployeeDataOnDemand LoanDataOnDemand.employeeDataOnDemand;
    
    public Loan LoanDataOnDemand.getNewTransientLoan(int index) {
        Loan obj = new Loan();
        setAccountNumber(obj, index);
        setAddress(obj, index);
        setApprovedByFinance_Department(obj, index);
        setApprovedByHead_Finance_Department(obj, index);
        setApprovedByManager(obj, index);
        setDateLoan(obj, index);
        setEPosition(obj, index);
        setInformation(obj, index);
        setMoneyLoan(obj, index);
        setReason(obj, index);
        return obj;
    }
    
        
        
    public void LoanDataOnDemand.setApprovedByFinance_Department(Loan obj, int index) {
        Boolean approvedByFinance_Department = Boolean.TRUE;
        obj.setApprovedByFinance_Department(approvedByFinance_Department);
    }
    
    public void LoanDataOnDemand.setApprovedByHead_Finance_Department(Loan obj, int index) {
        Boolean approvedByHead_Finance_Department = Boolean.TRUE;
        obj.setApprovedByHead_Finance_Department(approvedByHead_Finance_Department);
    }
    
    public void LoanDataOnDemand.setApprovedByManager(Loan obj, int index) {
        Boolean approvedByManager = Boolean.TRUE;
        obj.setApprovedByManager(approvedByManager);
    }
    
    public void LoanDataOnDemand.setDateLoan(Loan obj, int index) {
        Date dateLoan = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateLoan(dateLoan);
    }
    
    public void LoanDataOnDemand.setEPosition(Loan obj, int index) {
        EPosition ePosition = EPosition.class.getEnumConstants()[0];
        obj.setEPosition(ePosition);
    }
    
    public void LoanDataOnDemand.setInformation(Loan obj, int index) {
        Employee information = employeeDataOnDemand.getRandomEmployee();
        obj.setInformation(information);
    }
    
        
        
    public Loan LoanDataOnDemand.getSpecificLoan(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Loan obj = data.get(index);
        Long id = obj.getId();
        return Loan.findLoan(id);
    }
    
    public Loan LoanDataOnDemand.getRandomLoan() {
        init();
        Loan obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Loan.findLoan(id);
    }
    
    public boolean LoanDataOnDemand.modifyLoan(Loan obj) {
        return false;
    }
    
    public void LoanDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Loan.findLoanEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Loan' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Loan>();
        for (int i = 0; i < 10; i++) {
            Loan obj = getNewTransientLoan(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
